The PLATO System Design

The Plato Project utilizes genetic algorithms for predicting investment
strategies in foreign currency markets. The objective is to develop a prediction
engine that analyzes historical data and current events to forecast changes in
currency values. The method involves creating simulated investors with initial
capital, allowing them to invest in foreign currencies. These investors go
through simulated periods of investment, after which a new generation is created
using principles of genetic algorithms. This process selectively breeds
investors based on their performance, with more successful ones having a higher
chance of influencing the next generation. Each generation starts with initial
capital and invests over a simulation period, with the aim of improving
investment strategies and returns over successive generations.  The predictive
engine is based on two major object types: an Investor and an Influencer.


The 'Influencer' class is one cornerstone of our architecture, acting as a base
for a variety of derived classes. Each subclass is designed to analyze a
distinct metric. The metrics fall into two categories: econometric indicators
(such as Inflation Rate, Housing Starts, Discount Rate, Stock Indexes, and Oil
Prices) and sentiment analysis metrics derived from news articles, with data
sourced from the GDELT project. Influencers are tasked with predicting the
movement of currency values between two predefined currencies, C1 and C2,
recommending one of three actions: "Buy", "Hold", or "Sell". Currently, the
predictions include a probability and weighting factor, both of which are
defaulted to 1 until a workable method for their determination is developed.

Subclasses of the Influencer have specific internal settings vital for enhancing
the accuracy of their predictions. For example, in forecasting the movement for
a target date T3, an Influencer examines historical data within a specified
window, from T3 - Delta1 to T3 - Delta2. These parameters, Delta1 and Delta2,
are crucial as they define the timeframe for data analysis. While external
constraints are applied to these values to improve computational efficiency and
focus on relevant data, the genetic algorithm does the heavy lifting to
fine-tune Delta1 and Delta2 to the optimal values.


The second cornerstone class within our architecture is the 'Investor', tasked
with managing its own private team of Influencers, and an investment fund. Its
investment fund is initialized at the start of each new generation to a
predefined value (InitFunds), denominated in a primary currency, C1. The
Investor's goal is to maximize returns by trading C1 for a secondary currency,
C2, and back, based on recommendations from its team of Influencers.

On a given date, the Investor solicits predictions from its Influencers to
inform its actions: buying C2 with C1, selling C2 for C1, or holding its current
positions. Investment decisions hinge on a predetermined internal value,
StdInvestment, which represents the default investment amount when conditions
favor buying. These decisions are guided by a COAStrategy (Course Of Action
Strategy), with two primary strategies implemented: "Majority Rules" and
"Distributed Decision."

Majority Rules: A straightforward approach where the Investor acts based on the
majority recommendation from Influencers. A majority for 'buy' translates to
converting StdInvestment of C1 into C2; a majority for 'sell' means converting
all C2 holdings back to C1. In the event of a tie between 'buy' and 'sell'
recommendations, the Investor maintains its current holdings.

Distributed Decision: This strategy adjusts the action's intensity based on the
proportion of recommendations. For example, if 6 out of 10 Influencers suggest
selling, the Investor sells 60% of its C2 holdings. A buy recommendation from 7
out of 10 Influencers leads to purchasing C2 with 70% of the StdInvestment. The
strategy also accounts for 'hold' recommendations, adjusting the action
proportionally. For instance, if the recommendations are split with 4 buys, 3
holds, and 3 sells, the net result favors a reduced buy action, converting 10%
of StdInvestment into C2, based on the differential between buy and sell votes.

This detailed mechanism enables the Investor to dynamically adjust its trading
actions, leveraging the collective intelligence of Influencers to navigate
currency markets more effectively.


The composition, number, and configuration of Influencers associated with an
Investor are optimized using genetic algorithms. Although it's feasible to
manually configure specific Investors with designated Influencers, our genetic
algorithm dynamically identifies the most effective combinations and settings
across generations.

An Investor's performance in generating profit is influenced not only by its
team of Influencers but also by various other parameters. Essentially, the
identity of an Investor is characterized by the constellation of its Influencers
and their respective configurations, in addition to the Investor's own settings.
This framework allows for the creation of a vast array of distinct Investors,
each with the potential to achieve optimal investment outcomes. To ascertain the
most effective configurations, we use a simulation program designed to evaluate
a multitude of unique Investors. The efficacy of each Investor is measured by
its ability to leverage predictions for successful currency trading.  Those that
accrue significant profits are deemed superior, whereas those resulting in
losses are classified as inferior. Given the immense variety of possible
Investor configurations, we rely on a genetic algorithm to navigate this
complexity, aiming to progressively identify and refine the best performers
through simulated cycles and successive generations.

A special mode of operation available in the simulator is called "the crucible".
By feeding the simulator a curated list of DNA strings along with specified time
periods, the crucible reconstitutes each Investor and subjects them to a series
of investment simulations across the designated intervals. This process not only
tests the adaptability and robustness of each strategy across varying market
conditions but also consolidates the findings into a comprehensive report
suitable for financial analysis and highlighting the performance metrics of each
Investor. This targeted approach allows us to isolate and analyze the
effectiveness of top-performing Investors, ensuring that only the most resilient
and profitable Investors are used in actual investing. The crucible, therefore,
stands as a critical component of our system, bridging the gap between
theoretical optimization and practical, real-world application.

"Single Investor Mode" is another specialized operational mode within the
simulator. In this mode, the simulation focuses exclusively on a single
Investor, which is configured using a DNA string specified in the configuration
file. This mode allows the simulator to run through the designated simulation
period for this particular Investor without generating new generations, thereby
streamlining the output reports. To enhance the depth of analysis, "Single
Investor Mode" can be paired with "trace" mode. This combination offers detailed
insights into the decision-making process of the Investor and its team of
Influencers, facilitating a comprehensive validation of the code and the
strategies employed. As a result, this mode serves as an invaluable debugging
and optimization tool, enabling both developers and researchers to scrutinize
the performance of Influencers as well as an Investor's strategy, ensuring they
operate as intended and contribute effectively to the Investor's performance.

The simulator has several different reports that provide insight into how the
code is working and the performance of the Investors. The reports are all in CSV
format to help facilitate experimentation, research, and graphing. Here is a
summary of reports.

simstats.csv - The Simulation Statistics report. This was the first report
developed. It provided insight into how the genetics perform.  For each
generation in the simulation it lists indicators that suggest whether the
successive generations are becoming better or worse. It includes information
such as the percentage of Investors that were profitable by the end of the
simulation period, the percentage of buys that turned out to be profitable, and
the most profitable Investor of the generation. It also lists the DNA of the
most profitable Investor for each generation.

finrep.csv - The Financial Report. The key information in this report includes
the maximum annualized return for the top n Investors across all generations of
the simulation, in which generation that Investor appeared, and its DNA.

crep.csv - The Crucible Report.  The crucible is a special run of the simulator.
The simulator is provided a list of DNA strings and time periods.  For each DNA
string, it reconstitutes the Investor and runs an investment simulation for that
individual Investor over all the time periods provided. It then summarizes the
results in the same way as the Financial Report.  As many simulations are done
over time, the DNA of investors that do exceptionally well can be saved. The
crucible can be used to validate their performance.

invrep.csv - The Investment Report.  This report provides a detailed transaction
log for one or more investors. It lists all details of every exchange, the
exchange rates, and for sells (exchanging C2 for C1) it lists the profit or loss
on that transaction. If the Investor's investment strategy is Distributed
Decision then it is likely that a buy (an exchange of C1 for C2) will be sold in
chunks. This report accounts for every chunk sold.

There are other modes and capabilities of the simulator. A few key ones are the
following:

Top Investor Count Feature: This configurable option allows users to specify the
number of top-performing Investors for which detailed reports are generated.
These reports not only cover their financial performance but also include the
unique DNA configuration that underpins their strategies. This feature
facilitates targeted analysis and replication of successful investment
behaviors.

Preserve Elite Option:The PreserveElite option ensures that a specified
percentage of the highest-performing Investors from one generation are exactly
replicated in the subsequent generation. Incorporating this method has
empirically enhanced the overall performance of our Investor pool by
approximately 1%, diverging from traditional genetic algorithm practices to
foster incremental improvement.

Investor Bonus Plan: Mimicking real-world incentive structures, this feature
boosts an Investor's genetic Fitness Score based on their performance.
Investors surpassing certain profitability thresholds receive a Fitness Score
multiplier, beginning at 2 and scaling with their ROI achievements. This
elevation in Fitness Score directly influences their likelihood of contributing
to the genetic makeup of future generations, prioritizing the propagation of
successful investment strategies.

Gen 0 Elite Injection: By introducing the DNA of exceptionally successful
Investors into the initial generation, the Gen 0 Elite feature provides a
strategic advantage right from the start. Without this, the first generation's
population is entirely randomized. Incorporating proven genetic material early
on effectively primes the simulation with a foundation of excellence, offering a
significant "head start" in the evolutionary process.


Appendix A: Assessing an Influencer's Accuracy

Determining the predictive accuracy of each Influencer type presents a complex
challenge. The intricacies stem from several factors that complicate a
straightforward evaluation:

Variable Research Periods: For any given prediction date, Influencers can
analyze data from a variable timeframe preceding that date. The genetic
algorithm may adjust this period extensively, affecting the basis on which
predictions are made.

Indeterminate Sale Dates: The lack of a predetermined sale date following a
'buy' prediction adds a layer of complexity to evaluating an Influencer's
predictive accuracy. Consider this scenario for illustration: Influencer X
advises buying currency C2 at time T1. This decision, influenced by the
collective recommendations of the Investor's team of Influencers, leads to the
purchase. However, Influencer X does not specify a sale date for C2. At a later
time, T2, Influencer X may suggest selling C2, but if the majority of the team
disagrees, the sale might be delayed until T3, potentially resulting in a loss.
In such a situation, attributing the loss directly to Influencer X's initial buy
recommendation becomes problematic. Conversely, if Influencer X recommends
holding C2 at T2, but the team decides to sell, leading to a profit, should this
outcome be considered a validation of Influencer X's judgment? These examples
underscore the difficulty in directly linking an Influencer's predictions with
the eventual financial outcomes of transactions, highlighting the nuanced
challenges inherent in assessing prediction accuracy within the simulation.




Complex Sale Attribution: Associating specific sales with their preceding buy
predictions is fraught with difficulty. A single buy prediction might lead to
purchases of varying amounts, with subsequent sales fragmented across multiple
transactions.

This appendix outlines the inherent challenges in accurately measuring the
effectiveness of Influencer predictions, reflecting the nuanced dynamics of the
simulation's operational environment.




Appendix A.  Assessing An Influencer's Accuracy

Assessing the probability of correctness of each Influencer type is a
deceptively complicated task. I'm not sure that there's a good way to do it.
The issue, in a nutshell is this:  for any given date on which it is asked to
make a prediction, (a) there is a variable time from prior to that date over
which it can do its research to make the prediction -- the genetics will vary
this time range wildly, (b) if the influencer predicts a buy, there is no set
date after it makes the prediction when the currency is sold and (c) tying a
sale back to a specific buy prediction may not be possible in many ways. A
purchase may have been in the amount of 10,000 but the sales may occur in much
smaller amounts across multiple sales.

Appendix B: Managing External Resources

In the development and operation of the Plato suite, accessing external
resources frequently necessitates confidential credentials. These resources may
include access keys for financial institutions, data vendors, or connections to
critical services such as shared databases. To prevent both unintentional and
deliberate exposure of these credentials, they are not stored within the source
code repository.

For secure management of these sensitive details, the Plato suite utilizes a
specific configuration file, extres.json5. This file should be located either in
the current directory from which a Plato tool is launched or in the directory
housing the tool’s executable. Importantly, extres.json5 must not be checked
into the version control system to avoid compromising its contents. It should be
securely stored and only deployed in environments where it is explicitly
required, underscoring that most Plato operations do not need access to
extres.json5.

When a Plato tool initiates, it searches for extres.json5 to access the
necessary credentials. In the absence of this file, the tool defaults to
creating an ExternalResources structure with minimal configuration: it includes
the executing process owner's username (excluding a password) and settings for a
default local MySQL database instance. This approach ensures the tool retains
basic functionality while clearly indicating when specialized external resources
are not available.
